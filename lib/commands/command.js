// Generated by CoffeeScript 1.4.0
var Command;

Command = (function() {

  function Command(msgData) {
    this.msgData = msgData;
    this.init();
  }

  Command.prototype.init = function() {
    this.parseType = null;
    this.command = null;
    return this.rankPrivelege = null;
  };

  Command.prototype.functionality = function(data) {};

  Command.prototype.hasPrivelege = function() {
    var user;
    user = data.users[this.msgData.fromID].getUser();
    switch (this.rankPrivelege) {
      case 'host':
        return user.permission === 5;
      case 'cohost':
        return user.permission >= 4;
      case 'mod':
        return user.permission >= 3;
      case 'manager':
        return user.permission >= 3;
      case 'bouncer':
        return user.permission >= 2;
      case 'featured':
        return user.permission >= 1;
      default:
        return true;
    }
  };

  Command.prototype.commandMatch = function() {
    var command, msg, _i, _len, _ref;
    msg = this.msgData.message.toLowerCase();
    if (typeof this.command === 'string') {
      if (this.parseType === 'exact') {
        if (msg === this.command) {
          return true;
        } else {
          return false;
        }
      } else if (this.parseType === 'startsWith') {
        if (msg.substr(0, this.command.length) === this.command) {
          return true;
        } else {
          return false;
        }
      } else if (this.parseType === 'contains') {
        if (msg.indexOf(this.command) !== -1) {
          return true;
        } else {
          return false;
        }
      }
    } else if (typeof this.command === 'object') {
      _ref = this.command;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        command = _ref[_i];
        if (this.parseType === 'exact') {
          if (msg === command) {
            return true;
          }
        } else if (this.parseType === 'startsWith') {
          if (msg.substr(0, command.length) === command) {
            return true;
          }
        } else if (this.parseType === 'contains') {
          if (msg.indexOf(command) !== -1) {
            return true;
          }
        }
      }
      return false;
    }
  };

  Command.prototype.evalMsg = function() {
    if (this.commandMatch() && this.hasPrivelege()) {
      this.functionality();
      return true;
    } else {
      return false;
    }
  };

  return Command;

})();
