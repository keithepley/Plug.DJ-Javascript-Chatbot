// Generated by CoffeeScript 1.4.0
var swapCommand,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

swapCommand = (function(_super) {

  __extends(swapCommand, _super);

  function swapCommand() {
    return swapCommand.__super__.constructor.apply(this, arguments);
  }

  swapCommand.prototype.init = function() {
    this.command = '.swap';
    this.parseType = 'startsWith';
    return this.rankPrivelege = 'mod';
  };

  swapCommand.prototype.functionality = function() {
    var msg, r, swapRegex, userAdd, userRemove, users;
    msg = this.msgData.message;
    swapRegex = new RegExp("^/swap @(.+) for @(.+)$");
    users = swapRegex.exec(msg).slice(1);
    r = new RoomHelper();
    if (users.length === 2) {
      userRemove = r.lookupUser(users[0]);
      userAdd = r.lookupUser(users[1]);
      if (userRemove === false || userAdd === false) {
        API.sendChat('Error parsing one or both names');
        return false;
      } else {
        return data.lockBooth(function() {
          API.moderateRemoveDJ(userRemove.id);
          API.sendChat("Removing " + userRemove.username + "...");
          return setTimeout(function() {
            API.moderateAddDJ(userAdd.id);
            API.sendChat("Adding " + userAdd.username + "...");
            return setTimeout(function() {
              return data.unlockBooth();
            }, 1500);
          }, 1500);
        });
      }
    } else {
      return API.sendChat("Command didn't parse into two seperate usernames");
    }
  };

  return swapCommand;

})(Command);
