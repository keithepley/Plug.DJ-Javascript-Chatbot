// Generated by CoffeeScript 1.4.0
var User,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

User = (function() {

  User.prototype.afkWarningCount = 0;

  User.prototype.lastWarning = null;

  User.prototype["protected"] = false;

  User.prototype.isInRoom = true;

  function User(user) {
    this.user = user;
    this.updateVote = __bind(this.updateVote, this);

    this.inRoom = __bind(this.inRoom, this);

    this.notDj = __bind(this.notDj, this);

    this.warn = __bind(this.warn, this);

    this.getIsDj = __bind(this.getIsDj, this);

    this.getWarningCount = __bind(this.getWarningCount, this);

    this.getUser = __bind(this.getUser, this);

    this.getLastWarning = __bind(this.getLastWarning, this);

    this.getLastActivity = __bind(this.getLastActivity, this);

    this.updateActivity = __bind(this.updateActivity, this);

    this.init = __bind(this.init, this);

    this.init();
  }

  User.prototype.init = function() {
    return this.lastActivity = new Date();
  };

  User.prototype.updateActivity = function() {
    this.lastActivity = new Date();
    this.afkWarningCount = 0;
    return this.lastWarning = null;
  };

  User.prototype.getLastActivity = function() {
    return this.lastActivity;
  };

  User.prototype.getLastWarning = function() {
    if (this.lastWarning === null) {
      return false;
    } else {
      return this.lastWarning;
    }
  };

  User.prototype.getUser = function() {
    return this.user;
  };

  User.prototype.getWarningCount = function() {
    return this.afkWarningCount;
  };

  User.prototype.getIsDj = function() {
    var DJs, dj, _i, _len;
    DJs = API.getWaitList();
    DJs = DJs.unshift(API.getDJ());
    for (_i = 0, _len = DJs.length; _i < _len; _i++) {
      dj = DJs[_i];
      if (this.user.id === dj.id) {
        return true;
      }
    }
    return false;
  };

  User.prototype.warn = function() {
    this.afkWarningCount++;
    return this.lastWarning = new Date();
  };

  User.prototype.notDj = function() {
    this.afkWarningCount = 0;
    return this.lastWarning = null;
  };

  User.prototype.inRoom = function(online) {
    return this.isInRoom = online;
  };

  User.prototype.fan = function() {
    return $.ajax({
      url: "http://plug.dj/_/gateway/user.follow",
      type: 'POST',
      data: JSON.stringify({
        service: "user.follow",
        body: [this.user.id]
      }),
      async: this.async,
      dataType: 'json',
      contentType: 'application/json'
    });
  };

  User.prototype.updateVote = function(v) {
    if (this.isInRoom) {
      return data.voteLog[this.user.id][data.currentsong.id] = v;
    }
  };

  return User;

})();
